{"version":3,"file":"app/src_main_webapp_app_entities_customer-details_customer-details-update_vue.chunk.js","sources":["webpack://posdevicerestapi/./src/main/webapp/app/entities/customer-details/customer-details-update.component.ts","webpack://posdevicerestapi/./src/main/webapp/app/shared/model/customer-details.model.ts","webpack://posdevicerestapi/./src/main/webapp/app/entities/customer-details/customer-details-update.vue","webpack://posdevicerestapi/./src/main/webapp/app/entities/customer-details/customer-details-update.component.ts?f933","webpack://posdevicerestapi/./src/main/webapp/app/entities/customer-details/customer-details-update.vue?a7f1"],"sourcesContent":["import { Component, Vue, Inject } from 'vue-property-decorator';\n\nimport { required } from 'vuelidate/lib/validators';\n\nimport UserService from '@/admin/user-management/user-management.service';\n\nimport ShoppingCartService from '@/entities/shopping-cart/shopping-cart.service';\nimport { IShoppingCart } from '@/shared/model/shopping-cart.model';\n\nimport { ICustomerDetails, CustomerDetails } from '@/shared/model/customer-details.model';\nimport CustomerDetailsService from './customer-details.service';\n\nconst validations: any = {\n  customerDetails: {\n    gender: {\n      required,\n    },\n    phone: {\n      required,\n    },\n    addressLine1: {\n      required,\n    },\n    addressLine2: {},\n    branch: {\n      required,\n    },\n    country: {\n      required,\n    },\n    user: {\n      required,\n    },\n  },\n};\n\n@Component({\n  validations,\n})\nexport default class CustomerDetailsUpdate extends Vue {\n  @Inject('customerDetailsService') private customerDetailsService: () => CustomerDetailsService;\n  public customerDetails: ICustomerDetails = new CustomerDetails();\n\n  @Inject('userService') private userService: () => UserService;\n\n  public users: Array<any> = [];\n\n  @Inject('shoppingCartService') private shoppingCartService: () => ShoppingCartService;\n\n  public shoppingCarts: IShoppingCart[] = [];\n  public isSaving = false;\n  public currentLanguage = '';\n\n  beforeRouteEnter(to, from, next) {\n    next(vm => {\n      if (to.params.customerDetailsId) {\n        vm.retrieveCustomerDetails(to.params.customerDetailsId);\n      }\n      vm.initRelationships();\n    });\n  }\n\n  created(): void {\n    this.currentLanguage = this.$store.getters.currentLanguage;\n    this.$store.watch(\n      () => this.$store.getters.currentLanguage,\n      () => {\n        this.currentLanguage = this.$store.getters.currentLanguage;\n      }\n    );\n  }\n\n  public save(): void {\n    this.isSaving = true;\n    if (this.customerDetails.id) {\n      this.customerDetailsService()\n        .update(this.customerDetails)\n        .then(param => {\n          this.isSaving = false;\n          this.$router.go(-1);\n          const message = this.$t('posdevicerestapiApp.customerDetails.updated', { param: param.id });\n          return this.$root.$bvToast.toast(message.toString(), {\n            toaster: 'b-toaster-top-center',\n            title: 'Info',\n            variant: 'info',\n            solid: true,\n            autoHideDelay: 5000,\n          });\n        });\n    } else {\n      this.customerDetailsService()\n        .create(this.customerDetails)\n        .then(param => {\n          this.isSaving = false;\n          this.$router.go(-1);\n          const message = this.$t('posdevicerestapiApp.customerDetails.created', { param: param.id });\n          this.$root.$bvToast.toast(message.toString(), {\n            toaster: 'b-toaster-top-center',\n            title: 'Success',\n            variant: 'success',\n            solid: true,\n            autoHideDelay: 5000,\n          });\n        });\n    }\n  }\n\n  public retrieveCustomerDetails(customerDetailsId): void {\n    this.customerDetailsService()\n      .find(customerDetailsId)\n      .then(res => {\n        this.customerDetails = res;\n      });\n  }\n\n  public previousState(): void {\n    this.$router.go(-1);\n  }\n\n  public initRelationships(): void {\n    this.userService()\n      .retrieve()\n      .then(res => {\n        this.users = res.data;\n      });\n    this.shoppingCartService()\n      .retrieve()\n      .then(res => {\n        this.shoppingCarts = res.data;\n      });\n  }\n}\n","import { IUser } from '@/shared/model/user.model';\nimport { IShoppingCart } from '@/shared/model/shopping-cart.model';\n\nimport { Gender } from '@/shared/model/enumerations/gender.model';\nexport interface ICustomerDetails {\n  id?: number;\n  gender?: Gender;\n  phone?: string;\n  addressLine1?: string;\n  addressLine2?: string | null;\n  branch?: string;\n  country?: string;\n  user?: IUser;\n  carts?: IShoppingCart[] | null;\n}\n\nexport class CustomerDetails implements ICustomerDetails {\n  constructor(\n    public id?: number,\n    public gender?: Gender,\n    public phone?: string,\n    public addressLine1?: string,\n    public addressLine2?: string | null,\n    public branch?: string,\n    public country?: string,\n    public user?: IUser,\n    public carts?: IShoppingCart[] | null\n  ) {}\n}\n","import { render, staticRenderFns } from \"./customer-details-update.vue?vue&type=template&id=6dca9f9c&\"\nimport script from \"./customer-details-update.component.ts?vue&type=script&lang=ts&\"\nexport * from \"./customer-details-update.component.ts?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/chrisphyne/Documents/JhipsterApps/archive/pos-device-monolith/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6dca9f9c')) {\n      api.createRecord('6dca9f9c', component.options)\n    } else {\n      api.reload('6dca9f9c', component.options)\n    }\n    module.hot.accept(\"./customer-details-update.vue?vue&type=template&id=6dca9f9c&\", function () {\n      api.rerender('6dca9f9c', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"src/main/webapp/app/entities/customer-details/customer-details-update.vue\"\nexport default component.exports","import mod from \"-!../../../../../../node_modules/ts-loader/index.js??clonedRuleSet-1[0].rules[0].use[0]!./customer-details-update.component.ts?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../../../../node_modules/ts-loader/index.js??clonedRuleSet-1[0].rules[0].use[0]!./customer-details-update.component.ts?vue&type=script&lang=ts&\"","var render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"row justify-content-center\" }, [\n    _c(\"div\", { staticClass: \"col-8\" }, [\n      _c(\n        \"form\",\n        {\n          attrs: { name: \"editForm\", role: \"form\", novalidate: \"\" },\n          on: {\n            submit: function ($event) {\n              $event.preventDefault()\n              return _vm.save()\n            },\n          },\n        },\n        [\n          _c(\n            \"h2\",\n            {\n              attrs: {\n                id:\n                  \"posdevicerestapiApp.customerDetails.home.createOrEditLabel\",\n                \"data-cy\": \"CustomerDetailsCreateUpdateHeading\",\n              },\n              domProps: {\n                textContent: _vm._s(\n                  _vm.$t(\n                    \"posdevicerestapiApp.customerDetails.home.createOrEditLabel\"\n                  )\n                ),\n              },\n            },\n            [_vm._v(\"\\n        Create or edit a CustomerDetails\\n      \")]\n          ),\n          _vm._v(\" \"),\n          _c(\"div\", [\n            _vm.customerDetails.id\n              ? _c(\"div\", { staticClass: \"form-group\" }, [\n                  _c(\n                    \"label\",\n                    {\n                      attrs: { for: \"id\" },\n                      domProps: {\n                        textContent: _vm._s(_vm.$t(\"global.field.id\")),\n                      },\n                    },\n                    [_vm._v(\"ID\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.customerDetails.id,\n                        expression: \"customerDetails.id\",\n                      },\n                    ],\n                    staticClass: \"form-control\",\n                    attrs: { type: \"text\", id: \"id\", name: \"id\", readonly: \"\" },\n                    domProps: { value: _vm.customerDetails.id },\n                    on: {\n                      input: function ($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(_vm.customerDetails, \"id\", $event.target.value)\n                      },\n                    },\n                  }),\n                ])\n              : _vm._e(),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"form-group\" }, [\n              _c(\n                \"label\",\n                {\n                  staticClass: \"form-control-label\",\n                  attrs: { for: \"customer-details-gender\" },\n                  domProps: {\n                    textContent: _vm._s(\n                      _vm.$t(\"posdevicerestapiApp.customerDetails.gender\")\n                    ),\n                  },\n                },\n                [_vm._v(\"Gender\")]\n              ),\n              _vm._v(\" \"),\n              _c(\n                \"select\",\n                {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.$v.customerDetails.gender.$model,\n                      expression: \"$v.customerDetails.gender.$model\",\n                    },\n                  ],\n                  staticClass: \"form-control\",\n                  class: {\n                    valid: !_vm.$v.customerDetails.gender.$invalid,\n                    invalid: _vm.$v.customerDetails.gender.$invalid,\n                  },\n                  attrs: {\n                    name: \"gender\",\n                    id: \"customer-details-gender\",\n                    \"data-cy\": \"gender\",\n                    required: \"\",\n                  },\n                  on: {\n                    change: function ($event) {\n                      var $$selectedVal = Array.prototype.filter\n                        .call($event.target.options, function (o) {\n                          return o.selected\n                        })\n                        .map(function (o) {\n                          var val = \"_value\" in o ? o._value : o.value\n                          return val\n                        })\n                      _vm.$set(\n                        _vm.$v.customerDetails.gender,\n                        \"$model\",\n                        $event.target.multiple\n                          ? $$selectedVal\n                          : $$selectedVal[0]\n                      )\n                    },\n                  },\n                },\n                [\n                  _c(\n                    \"option\",\n                    {\n                      attrs: {\n                        value: \"MALE\",\n                        label: _vm.$t(\"posdevicerestapiApp.Gender.MALE\"),\n                      },\n                    },\n                    [_vm._v(\"MALE\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"option\",\n                    {\n                      attrs: {\n                        value: \"FEMALE\",\n                        label: _vm.$t(\"posdevicerestapiApp.Gender.FEMALE\"),\n                      },\n                    },\n                    [_vm._v(\"FEMALE\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"option\",\n                    {\n                      attrs: {\n                        value: \"OTHER\",\n                        label: _vm.$t(\"posdevicerestapiApp.Gender.OTHER\"),\n                      },\n                    },\n                    [_vm._v(\"OTHER\")]\n                  ),\n                ]\n              ),\n              _vm._v(\" \"),\n              _vm.$v.customerDetails.gender.$anyDirty &&\n              _vm.$v.customerDetails.gender.$invalid\n                ? _c(\"div\", [\n                    !_vm.$v.customerDetails.gender.required\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\"entity.validation.required\")\n                              ),\n                            },\n                          },\n                          [\n                            _vm._v(\n                              \"\\n              This field is required.\\n            \"\n                            ),\n                          ]\n                        )\n                      : _vm._e(),\n                  ])\n                : _vm._e(),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"form-group\" }, [\n              _c(\n                \"label\",\n                {\n                  staticClass: \"form-control-label\",\n                  attrs: { for: \"customer-details-phone\" },\n                  domProps: {\n                    textContent: _vm._s(\n                      _vm.$t(\"posdevicerestapiApp.customerDetails.phone\")\n                    ),\n                  },\n                },\n                [_vm._v(\"Phone\")]\n              ),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.$v.customerDetails.phone.$model,\n                    expression: \"$v.customerDetails.phone.$model\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                class: {\n                  valid: !_vm.$v.customerDetails.phone.$invalid,\n                  invalid: _vm.$v.customerDetails.phone.$invalid,\n                },\n                attrs: {\n                  type: \"text\",\n                  name: \"phone\",\n                  id: \"customer-details-phone\",\n                  \"data-cy\": \"phone\",\n                  required: \"\",\n                },\n                domProps: { value: _vm.$v.customerDetails.phone.$model },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(\n                      _vm.$v.customerDetails.phone,\n                      \"$model\",\n                      $event.target.value\n                    )\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _vm.$v.customerDetails.phone.$anyDirty &&\n              _vm.$v.customerDetails.phone.$invalid\n                ? _c(\"div\", [\n                    !_vm.$v.customerDetails.phone.required\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\"entity.validation.required\")\n                              ),\n                            },\n                          },\n                          [\n                            _vm._v(\n                              \"\\n              This field is required.\\n            \"\n                            ),\n                          ]\n                        )\n                      : _vm._e(),\n                  ])\n                : _vm._e(),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"form-group\" }, [\n              _c(\n                \"label\",\n                {\n                  staticClass: \"form-control-label\",\n                  attrs: { for: \"customer-details-addressLine1\" },\n                  domProps: {\n                    textContent: _vm._s(\n                      _vm.$t(\"posdevicerestapiApp.customerDetails.addressLine1\")\n                    ),\n                  },\n                },\n                [_vm._v(\"Address Line 1\")]\n              ),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.$v.customerDetails.addressLine1.$model,\n                    expression: \"$v.customerDetails.addressLine1.$model\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                class: {\n                  valid: !_vm.$v.customerDetails.addressLine1.$invalid,\n                  invalid: _vm.$v.customerDetails.addressLine1.$invalid,\n                },\n                attrs: {\n                  type: \"text\",\n                  name: \"addressLine1\",\n                  id: \"customer-details-addressLine1\",\n                  \"data-cy\": \"addressLine1\",\n                  required: \"\",\n                },\n                domProps: { value: _vm.$v.customerDetails.addressLine1.$model },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(\n                      _vm.$v.customerDetails.addressLine1,\n                      \"$model\",\n                      $event.target.value\n                    )\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _vm.$v.customerDetails.addressLine1.$anyDirty &&\n              _vm.$v.customerDetails.addressLine1.$invalid\n                ? _c(\"div\", [\n                    !_vm.$v.customerDetails.addressLine1.required\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\"entity.validation.required\")\n                              ),\n                            },\n                          },\n                          [\n                            _vm._v(\n                              \"\\n              This field is required.\\n            \"\n                            ),\n                          ]\n                        )\n                      : _vm._e(),\n                  ])\n                : _vm._e(),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"form-group\" }, [\n              _c(\n                \"label\",\n                {\n                  staticClass: \"form-control-label\",\n                  attrs: { for: \"customer-details-addressLine2\" },\n                  domProps: {\n                    textContent: _vm._s(\n                      _vm.$t(\"posdevicerestapiApp.customerDetails.addressLine2\")\n                    ),\n                  },\n                },\n                [_vm._v(\"Address Line 2\")]\n              ),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.$v.customerDetails.addressLine2.$model,\n                    expression: \"$v.customerDetails.addressLine2.$model\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                class: {\n                  valid: !_vm.$v.customerDetails.addressLine2.$invalid,\n                  invalid: _vm.$v.customerDetails.addressLine2.$invalid,\n                },\n                attrs: {\n                  type: \"text\",\n                  name: \"addressLine2\",\n                  id: \"customer-details-addressLine2\",\n                  \"data-cy\": \"addressLine2\",\n                },\n                domProps: { value: _vm.$v.customerDetails.addressLine2.$model },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(\n                      _vm.$v.customerDetails.addressLine2,\n                      \"$model\",\n                      $event.target.value\n                    )\n                  },\n                },\n              }),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"form-group\" }, [\n              _c(\n                \"label\",\n                {\n                  staticClass: \"form-control-label\",\n                  attrs: { for: \"customer-details-branch\" },\n                  domProps: {\n                    textContent: _vm._s(\n                      _vm.$t(\"posdevicerestapiApp.customerDetails.branch\")\n                    ),\n                  },\n                },\n                [_vm._v(\"Branch\")]\n              ),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.$v.customerDetails.branch.$model,\n                    expression: \"$v.customerDetails.branch.$model\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                class: {\n                  valid: !_vm.$v.customerDetails.branch.$invalid,\n                  invalid: _vm.$v.customerDetails.branch.$invalid,\n                },\n                attrs: {\n                  type: \"text\",\n                  name: \"branch\",\n                  id: \"customer-details-branch\",\n                  \"data-cy\": \"branch\",\n                  required: \"\",\n                },\n                domProps: { value: _vm.$v.customerDetails.branch.$model },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(\n                      _vm.$v.customerDetails.branch,\n                      \"$model\",\n                      $event.target.value\n                    )\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _vm.$v.customerDetails.branch.$anyDirty &&\n              _vm.$v.customerDetails.branch.$invalid\n                ? _c(\"div\", [\n                    !_vm.$v.customerDetails.branch.required\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\"entity.validation.required\")\n                              ),\n                            },\n                          },\n                          [\n                            _vm._v(\n                              \"\\n              This field is required.\\n            \"\n                            ),\n                          ]\n                        )\n                      : _vm._e(),\n                  ])\n                : _vm._e(),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"form-group\" }, [\n              _c(\n                \"label\",\n                {\n                  staticClass: \"form-control-label\",\n                  attrs: { for: \"customer-details-country\" },\n                  domProps: {\n                    textContent: _vm._s(\n                      _vm.$t(\"posdevicerestapiApp.customerDetails.country\")\n                    ),\n                  },\n                },\n                [_vm._v(\"Country\")]\n              ),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.$v.customerDetails.country.$model,\n                    expression: \"$v.customerDetails.country.$model\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                class: {\n                  valid: !_vm.$v.customerDetails.country.$invalid,\n                  invalid: _vm.$v.customerDetails.country.$invalid,\n                },\n                attrs: {\n                  type: \"text\",\n                  name: \"country\",\n                  id: \"customer-details-country\",\n                  \"data-cy\": \"country\",\n                  required: \"\",\n                },\n                domProps: { value: _vm.$v.customerDetails.country.$model },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(\n                      _vm.$v.customerDetails.country,\n                      \"$model\",\n                      $event.target.value\n                    )\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _vm.$v.customerDetails.country.$anyDirty &&\n              _vm.$v.customerDetails.country.$invalid\n                ? _c(\"div\", [\n                    !_vm.$v.customerDetails.country.required\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\"entity.validation.required\")\n                              ),\n                            },\n                          },\n                          [\n                            _vm._v(\n                              \"\\n              This field is required.\\n            \"\n                            ),\n                          ]\n                        )\n                      : _vm._e(),\n                  ])\n                : _vm._e(),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"form-group\" }, [\n              _c(\n                \"label\",\n                {\n                  staticClass: \"form-control-label\",\n                  attrs: { for: \"customer-details-user\" },\n                  domProps: {\n                    textContent: _vm._s(\n                      _vm.$t(\"posdevicerestapiApp.customerDetails.user\")\n                    ),\n                  },\n                },\n                [_vm._v(\"User\")]\n              ),\n              _vm._v(\" \"),\n              _c(\n                \"select\",\n                {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.customerDetails.user,\n                      expression: \"customerDetails.user\",\n                    },\n                  ],\n                  staticClass: \"form-control\",\n                  attrs: {\n                    id: \"customer-details-user\",\n                    \"data-cy\": \"user\",\n                    name: \"user\",\n                    required: \"\",\n                  },\n                  on: {\n                    change: function ($event) {\n                      var $$selectedVal = Array.prototype.filter\n                        .call($event.target.options, function (o) {\n                          return o.selected\n                        })\n                        .map(function (o) {\n                          var val = \"_value\" in o ? o._value : o.value\n                          return val\n                        })\n                      _vm.$set(\n                        _vm.customerDetails,\n                        \"user\",\n                        $event.target.multiple\n                          ? $$selectedVal\n                          : $$selectedVal[0]\n                      )\n                    },\n                  },\n                },\n                [\n                  !_vm.customerDetails.user\n                    ? _c(\"option\", {\n                        attrs: { selected: \"\" },\n                        domProps: { value: null },\n                      })\n                    : _vm._e(),\n                  _vm._v(\" \"),\n                  _vm._l(_vm.users, function (userOption) {\n                    return _c(\n                      \"option\",\n                      {\n                        key: userOption.id,\n                        domProps: {\n                          value:\n                            _vm.customerDetails.user &&\n                            userOption.id === _vm.customerDetails.user.id\n                              ? _vm.customerDetails.user\n                              : userOption,\n                        },\n                      },\n                      [\n                        _vm._v(\n                          \"\\n              \" +\n                            _vm._s(userOption.login) +\n                            \"\\n            \"\n                        ),\n                      ]\n                    )\n                  }),\n                ],\n                2\n              ),\n            ]),\n            _vm._v(\" \"),\n            _vm.$v.customerDetails.user.$anyDirty &&\n            _vm.$v.customerDetails.user.$invalid\n              ? _c(\"div\", [\n                  !_vm.$v.customerDetails.user.required\n                    ? _c(\n                        \"small\",\n                        {\n                          staticClass: \"form-text text-danger\",\n                          domProps: {\n                            textContent: _vm._s(\n                              _vm.$t(\"entity.validation.required\")\n                            ),\n                          },\n                        },\n                        [\n                          _vm._v(\n                            \"\\n            This field is required.\\n          \"\n                          ),\n                        ]\n                      )\n                    : _vm._e(),\n                ])\n              : _vm._e(),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", [\n            _c(\n              \"button\",\n              {\n                staticClass: \"btn btn-secondary\",\n                attrs: { type: \"button\", id: \"cancel-save\" },\n                on: {\n                  click: function ($event) {\n                    return _vm.previousState()\n                  },\n                },\n              },\n              [\n                _c(\"font-awesome-icon\", { attrs: { icon: \"ban\" } }),\n                _vm._v(\" \"),\n                _c(\n                  \"span\",\n                  {\n                    domProps: {\n                      textContent: _vm._s(_vm.$t(\"entity.action.cancel\")),\n                    },\n                  },\n                  [_vm._v(\"Cancel\")]\n                ),\n              ],\n              1\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"button\",\n              {\n                staticClass: \"btn btn-primary\",\n                attrs: {\n                  type: \"submit\",\n                  id: \"save-entity\",\n                  \"data-cy\": \"entityCreateSaveButton\",\n                  disabled: _vm.$v.customerDetails.$invalid || _vm.isSaving,\n                },\n              },\n              [\n                _c(\"font-awesome-icon\", { attrs: { icon: \"save\" } }),\n                _vm._v(\" \"),\n                _c(\n                  \"span\",\n                  {\n                    domProps: {\n                      textContent: _vm._s(_vm.$t(\"entity.action.save\")),\n                    },\n                  },\n                  [_vm._v(\"Save\")]\n                ),\n              ],\n              1\n            ),\n          ]),\n        ]\n      ),\n    ]),\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAOA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAEA;AAIA;AAIA;AACA;AACA;;AAgFA;AA9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1FA;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAIA;AAAA;;AAAA;AARA;AAHA;AACA;AACA;AACA;AA4FA;AAAA;AA5FA;;;A;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;A;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A;;;;;;;;;;;ACtsourceRoot":""}