{"version":3,"file":"app/src_main_webapp_app_account_settings_settings_vue.chunk.js","sources":["webpack://posdevicerestapi/./src/main/webapp/app/account/settings/settings.component.ts","webpack://posdevicerestapi/./src/main/webapp/app/account/settings/settings.vue","webpack://posdevicerestapi/./src/main/webapp/app/account/settings/settings.component.ts?7a1e","webpack://posdevicerestapi/./src/main/webapp/app/account/settings/settings.vue?0420"],"sourcesContent":["import { email, maxLength, minLength, required } from 'vuelidate/lib/validators';\nimport axios from 'axios';\nimport { EMAIL_ALREADY_USED_TYPE } from '@/constants';\nimport { Vue, Component } from 'vue-property-decorator';\n\nconst validations = {\n  settingsAccount: {\n    firstName: {\n      required,\n      minLength: minLength(1),\n      maxLength: maxLength(50),\n    },\n    lastName: {\n      required,\n      minLength: minLength(1),\n      maxLength: maxLength(50),\n    },\n    email: {\n      required,\n      email,\n      minLength: minLength(5),\n      maxLength: maxLength(254),\n    },\n  },\n};\n\n@Component({\n  validations,\n})\nexport default class Settings extends Vue {\n  public success: string = null;\n  public error: string = null;\n  public errorEmailExists: string = null;\n  public languages: any = this.$store.getters.languages || [];\n\n  public save(): void {\n    this.error = null;\n    this.errorEmailExists = null;\n    axios\n      .post('api/account', this.settingsAccount)\n      .then(() => {\n        this.error = null;\n        this.success = 'OK';\n        this.errorEmailExists = null;\n      })\n      .catch(error => {\n        this.success = null;\n        this.error = 'ERROR';\n        if (error.response.status === 400 && error.response.data.type === EMAIL_ALREADY_USED_TYPE) {\n          this.errorEmailExists = 'ERROR';\n          this.error = null;\n        }\n      });\n  }\n\n  public get settingsAccount(): any {\n    return this.$store.getters.account;\n  }\n\n  public get username(): string {\n    return this.$store.getters.account ? this.$store.getters.account.login : '';\n  }\n}\n","import { render, staticRenderFns } from \"./settings.vue?vue&type=template&id=27f84c0a&\"\nimport script from \"./settings.component.ts?vue&type=script&lang=ts&\"\nexport * from \"./settings.component.ts?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/chrisphyne/Documents/JhipsterApps/archive/pos-device-monolith/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('27f84c0a')) {\n      api.createRecord('27f84c0a', component.options)\n    } else {\n      api.reload('27f84c0a', component.options)\n    }\n    module.hot.accept(\"./settings.vue?vue&type=template&id=27f84c0a&\", function () {\n      api.rerender('27f84c0a', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"src/main/webapp/app/account/settings/settings.vue\"\nexport default component.exports","import mod from \"-!../../../../../../node_modules/ts-loader/index.js??clonedRuleSet-1[0].rules[0].use[0]!./settings.component.ts?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../../../../node_modules/ts-loader/index.js??clonedRuleSet-1[0].rules[0].use[0]!./settings.component.ts?vue&type=script&lang=ts&\"","var render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", [\n    _c(\"div\", { staticClass: \"row justify-content-center\" }, [\n      _c(\"div\", { staticClass: \"col-md-8 toastify-container\" }, [\n        _vm.username\n          ? _c(\"h2\", { attrs: { id: \"settings-title\" } }, [\n              _c(\n                \"span\",\n                {\n                  domProps: {\n                    innerHTML: _vm._s(\n                      _vm.$t(\"settings.title\", { username: _vm.username })\n                    ),\n                  },\n                },\n                [\n                  _vm._v(\"User settings for [\"),\n                  _c(\"strong\", [_vm._v(_vm._s(_vm.username))]),\n                  _vm._v(\"]\"),\n                ]\n              ),\n            ])\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.success\n          ? _c(\n              \"div\",\n              {\n                staticClass: \"alert alert-success\",\n                attrs: { role: \"alert\" },\n                domProps: {\n                  innerHTML: _vm._s(_vm.$t(\"settings.messages.success\")),\n                },\n              },\n              [_c(\"strong\", [_vm._v(\"Settings saved!\")])]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.errorEmailExists\n          ? _c(\n              \"div\",\n              {\n                staticClass: \"alert alert-danger\",\n                attrs: { role: \"alert\" },\n                domProps: {\n                  innerHTML: _vm._s(\n                    _vm.$t(\"register.messages.error.emailexists\")\n                  ),\n                },\n              },\n              [\n                _c(\"strong\", [_vm._v(\"Email is already in use!\")]),\n                _vm._v(\" Please choose another one.\\n      \"),\n              ]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.settingsAccount\n          ? _c(\n              \"form\",\n              {\n                attrs: {\n                  name: \"form\",\n                  id: \"settings-form\",\n                  role: \"form\",\n                  novalidate: \"\",\n                },\n                on: {\n                  submit: function ($event) {\n                    $event.preventDefault()\n                    return _vm.save()\n                  },\n                },\n              },\n              [\n                _c(\"div\", { staticClass: \"form-group\" }, [\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"form-control-label\",\n                      attrs: { for: \"firstName\" },\n                      domProps: {\n                        textContent: _vm._s(_vm.$t(\"settings.form.firstname\")),\n                      },\n                    },\n                    [_vm._v(\"First Name\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.$v.settingsAccount.firstName.$model,\n                        expression: \"$v.settingsAccount.firstName.$model\",\n                      },\n                    ],\n                    staticClass: \"form-control\",\n                    class: {\n                      valid: !_vm.$v.settingsAccount.firstName.$invalid,\n                      invalid: _vm.$v.settingsAccount.firstName.$invalid,\n                    },\n                    attrs: {\n                      type: \"text\",\n                      id: \"firstName\",\n                      name: \"firstName\",\n                      placeholder: _vm.$t(\n                        \"settings.form['firstname.placeholder']\"\n                      ),\n                      minlength: \"1\",\n                      maxlength: \"50\",\n                      required: \"\",\n                      \"data-cy\": \"firstname\",\n                    },\n                    domProps: {\n                      value: _vm.$v.settingsAccount.firstName.$model,\n                    },\n                    on: {\n                      input: function ($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.$v.settingsAccount.firstName,\n                          \"$model\",\n                          $event.target.value\n                        )\n                      },\n                    },\n                  }),\n                  _vm._v(\" \"),\n                  _vm.$v.settingsAccount.firstName.$anyDirty &&\n                  _vm.$v.settingsAccount.firstName.$invalid\n                    ? _c(\"div\", [\n                        !_vm.$v.settingsAccount.firstName.required\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"settings.messages.validate.firstname.required\"\n                                    )\n                                  ),\n                                },\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n              Your first name is required.\\n            \"\n                                ),\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.settingsAccount.firstName.minLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"settings.messages.validate.firstname.minlength\"\n                                    )\n                                  ),\n                                },\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n              Your first name is required to be at least 1 character.\\n            \"\n                                ),\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.settingsAccount.firstName.maxLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"settings.messages.validate.firstname.maxlength\"\n                                    )\n                                  ),\n                                },\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n              Your first name cannot be longer than 50 characters.\\n            \"\n                                ),\n                              ]\n                            )\n                          : _vm._e(),\n                      ])\n                    : _vm._e(),\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"form-group\" }, [\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"form-control-label\",\n                      attrs: { for: \"lastName\" },\n                      domProps: {\n                        textContent: _vm._s(_vm.$t(\"settings.form.lastname\")),\n                      },\n                    },\n                    [_vm._v(\"Last Name\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.$v.settingsAccount.lastName.$model,\n                        expression: \"$v.settingsAccount.lastName.$model\",\n                      },\n                    ],\n                    staticClass: \"form-control\",\n                    class: {\n                      valid: !_vm.$v.settingsAccount.lastName.$invalid,\n                      invalid: _vm.$v.settingsAccount.lastName.$invalid,\n                    },\n                    attrs: {\n                      type: \"text\",\n                      id: \"lastName\",\n                      name: \"lastName\",\n                      placeholder: _vm.$t(\n                        \"settings.form['lastname.placeholder']\"\n                      ),\n                      minlength: \"1\",\n                      maxlength: \"50\",\n                      required: \"\",\n                      \"data-cy\": \"lastname\",\n                    },\n                    domProps: { value: _vm.$v.settingsAccount.lastName.$model },\n                    on: {\n                      input: function ($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.$v.settingsAccount.lastName,\n                          \"$model\",\n                          $event.target.value\n                        )\n                      },\n                    },\n                  }),\n                  _vm._v(\" \"),\n                  _vm.$v.settingsAccount.lastName.$anyDirty &&\n                  _vm.$v.settingsAccount.lastName.$invalid\n                    ? _c(\"div\", [\n                        !_vm.$v.settingsAccount.lastName.required\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"settings.messages.validate.lastname.required\"\n                                    )\n                                  ),\n                                },\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n              Your last name is required.\\n            \"\n                                ),\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.settingsAccount.lastName.minLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"settings.messages.validate.lastname.minlength\"\n                                    )\n                                  ),\n                                },\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n              Your last name is required to be at least 1 character.\\n            \"\n                                ),\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.settingsAccount.lastName.maxLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"settings.messages.validate.lastname.maxlength\"\n                                    )\n                                  ),\n                                },\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n              Your last name cannot be longer than 50 characters.\\n            \"\n                                ),\n                              ]\n                            )\n                          : _vm._e(),\n                      ])\n                    : _vm._e(),\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"form-group\" }, [\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"form-control-label\",\n                      attrs: { for: \"email\" },\n                      domProps: {\n                        textContent: _vm._s(\n                          _vm.$t(\"global.form['email.label']\")\n                        ),\n                      },\n                    },\n                    [_vm._v(\"Email\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.$v.settingsAccount.email.$model,\n                        expression: \"$v.settingsAccount.email.$model\",\n                      },\n                    ],\n                    staticClass: \"form-control\",\n                    class: {\n                      valid: !_vm.$v.settingsAccount.email.$invalid,\n                      invalid: _vm.$v.settingsAccount.email.$invalid,\n                    },\n                    attrs: {\n                      type: \"email\",\n                      id: \"email\",\n                      name: \"email\",\n                      placeholder: _vm.$t(\"global.form['email.placeholder']\"),\n                      minlength: \"5\",\n                      maxlength: \"254\",\n                      email: \"\",\n                      required: \"\",\n                      \"data-cy\": \"email\",\n                    },\n                    domProps: { value: _vm.$v.settingsAccount.email.$model },\n                    on: {\n                      input: function ($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.$v.settingsAccount.email,\n                          \"$model\",\n                          $event.target.value\n                        )\n                      },\n                    },\n                  }),\n                  _vm._v(\" \"),\n                  _vm.$v.settingsAccount.email.$anyDirty &&\n                  _vm.$v.settingsAccount.email.$invalid\n                    ? _c(\"div\", [\n                        !_vm.$v.settingsAccount.email.required\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.email.required\"\n                                    )\n                                  ),\n                                },\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n              Your email is required.\\n            \"\n                                ),\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.settingsAccount.email.email\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.email.invalid\"\n                                    )\n                                  ),\n                                },\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n              Your email is invalid.\\n            \"\n                                ),\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.settingsAccount.email.minLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.email.minlength\"\n                                    )\n                                  ),\n                                },\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n              Your email is required to be at least 5 characters.\\n            \"\n                                ),\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.settingsAccount.email.maxLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.email.maxlength\"\n                                    )\n                                  ),\n                                },\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n              Your email cannot be longer than 100 characters.\\n            \"\n                                ),\n                              ]\n                            )\n                          : _vm._e(),\n                      ])\n                    : _vm._e(),\n                ]),\n                _vm._v(\" \"),\n                _vm.languages && Object.keys(_vm.languages).length > 1\n                  ? _c(\"div\", { staticClass: \"form-group\" }, [\n                      _c(\n                        \"label\",\n                        {\n                          attrs: { for: \"langKey\" },\n                          domProps: {\n                            textContent: _vm._s(\n                              _vm.$t(\"settings.form.language\")\n                            ),\n                          },\n                        },\n                        [_vm._v(\"Language\")]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"select\",\n                        {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: _vm.settingsAccount.langKey,\n                              expression: \"settingsAccount.langKey\",\n                            },\n                          ],\n                          staticClass: \"form-control\",\n                          attrs: {\n                            id: \"langKey\",\n                            name: \"langKey\",\n                            \"data-cy\": \"langKey\",\n                          },\n                          on: {\n                            change: function ($event) {\n                              var $$selectedVal = Array.prototype.filter\n                                .call($event.target.options, function (o) {\n                                  return o.selected\n                                })\n                                .map(function (o) {\n                                  var val = \"_value\" in o ? o._value : o.value\n                                  return val\n                                })\n                              _vm.$set(\n                                _vm.settingsAccount,\n                                \"langKey\",\n                                $event.target.multiple\n                                  ? $$selectedVal\n                                  : $$selectedVal[0]\n                              )\n                            },\n                          },\n                        },\n                        _vm._l(_vm.languages, function (language, key) {\n                          return _c(\n                            \"option\",\n                            { key: \"lang-\" + key, domProps: { value: key } },\n                            [_vm._v(_vm._s(language.name))]\n                          )\n                        }),\n                        0\n                      ),\n                    ])\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _c(\n                  \"button\",\n                  {\n                    staticClass: \"btn btn-primary\",\n                    attrs: {\n                      type: \"submit\",\n                      disabled: _vm.$v.settingsAccount.$invalid,\n                      \"data-cy\": \"submit\",\n                    },\n                    domProps: {\n                      textContent: _vm._s(_vm.$t(\"settings.form.button\")),\n                    },\n                  },\n                  [_vm._v(\"\\n          Save\\n        \")]\n                ),\n              ]\n            )\n          : _vm._e(),\n      ]),\n    ]),\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AA6BA;AA3BA;AAAA;AACA;AACA;AACA,yDACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAhCA;AAHA;AACA;AACA;AACA;AAiCA;AAAA;AAjCA;;;A;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A;;;;;;;;;;;ACtsourceRoot":""}