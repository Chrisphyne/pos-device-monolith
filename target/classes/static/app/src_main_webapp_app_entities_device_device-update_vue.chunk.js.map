{"version":3,"file":"app/src_main_webapp_app_entities_device_device-update_vue.chunk.js","sources":["webpack://posdevicerestapi/./src/main/webapp/app/entities/device/device-update.component.ts","webpack://posdevicerestapi/./src/main/webapp/app/shared/data/data-utils.service.ts","webpack://posdevicerestapi/./src/main/webapp/app/shared/model/device.model.ts","webpack://posdevicerestapi/./src/main/webapp/app/entities/device/device-update.vue","webpack://posdevicerestapi/./src/main/webapp/app/entities/device/device-update.component.ts?c6ee","webpack://posdevicerestapi/./src/main/webapp/app/entities/device/device-update.vue?2e8b"],"sourcesContent":["import { Component, Inject } from 'vue-property-decorator';\n\nimport { mixins } from 'vue-class-component';\nimport JhiDataUtils from '@/shared/data/data-utils.service';\n\nimport { required, decimal, minValue } from 'vuelidate/lib/validators';\n\nimport DeviceModelService from '@/entities/device-model/device-model.service';\nimport { IDeviceModel } from '@/shared/model/device-model.model';\n\nimport { IDevice, Device } from '@/shared/model/device.model';\nimport DeviceService from './device.service';\n\nconst validations: any = {\n  device: {\n    name: {\n      required,\n    },\n    description: {},\n    price: {\n      required,\n      decimal,\n      min: minValue(0),\n    },\n    deviceSize: {\n      required,\n    },\n    image: {},\n    deviceModel: {\n      required,\n    },\n  },\n};\n\n@Component({\n  validations,\n})\nexport default class DeviceUpdate extends mixins(JhiDataUtils) {\n  @Inject('deviceService') private deviceService: () => DeviceService;\n  public device: IDevice = new Device();\n\n  @Inject('deviceModelService') private deviceModelService: () => DeviceModelService;\n\n  public deviceModels: IDeviceModel[] = [];\n  public isSaving = false;\n  public currentLanguage = '';\n\n  beforeRouteEnter(to, from, next) {\n    next(vm => {\n      if (to.params.deviceId) {\n        vm.retrieveDevice(to.params.deviceId);\n      }\n      vm.initRelationships();\n    });\n  }\n\n  created(): void {\n    this.currentLanguage = this.$store.getters.currentLanguage;\n    this.$store.watch(\n      () => this.$store.getters.currentLanguage,\n      () => {\n        this.currentLanguage = this.$store.getters.currentLanguage;\n      }\n    );\n  }\n\n  public save(): void {\n    this.isSaving = true;\n    if (this.device.id) {\n      this.deviceService()\n        .update(this.device)\n        .then(param => {\n          this.isSaving = false;\n          this.$router.go(-1);\n          const message = this.$t('posdevicerestapiApp.device.updated', { param: param.id });\n          return this.$root.$bvToast.toast(message.toString(), {\n            toaster: 'b-toaster-top-center',\n            title: 'Info',\n            variant: 'info',\n            solid: true,\n            autoHideDelay: 5000,\n          });\n        });\n    } else {\n      this.deviceService()\n        .create(this.device)\n        .then(param => {\n          this.isSaving = false;\n          this.$router.go(-1);\n          const message = this.$t('posdevicerestapiApp.device.created', { param: param.id });\n          this.$root.$bvToast.toast(message.toString(), {\n            toaster: 'b-toaster-top-center',\n            title: 'Success',\n            variant: 'success',\n            solid: true,\n            autoHideDelay: 5000,\n          });\n        });\n    }\n  }\n\n  public retrieveDevice(deviceId): void {\n    this.deviceService()\n      .find(deviceId)\n      .then(res => {\n        this.device = res;\n      });\n  }\n\n  public previousState(): void {\n    this.$router.go(-1);\n  }\n\n  public clearInputImage(field, fieldContentType, idInput): void {\n    if (this.device && field && fieldContentType) {\n      if (Object.prototype.hasOwnProperty.call(this.device, field)) {\n        this.device[field] = null;\n      }\n      if (Object.prototype.hasOwnProperty.call(this.device, fieldContentType)) {\n        this.device[fieldContentType] = null;\n      }\n      if (idInput) {\n        (<any>this).$refs[idInput] = null;\n      }\n    }\n  }\n\n  public initRelationships(): void {\n    this.deviceModelService()\n      .retrieve()\n      .then(res => {\n        this.deviceModels = res.data;\n      });\n  }\n}\n","import { Component, Vue } from 'vue-property-decorator';\n\n/**\n * An utility service for data.\n */\n@Component\nexport default class JhiDataUtils extends Vue {\n  /**\n   * Method to abbreviate the text given\n   */\n  abbreviate(text, append = '...') {\n    if (text.length < 30) {\n      return text;\n    }\n    return text ? text.substring(0, 15) + append + text.slice(-10) : '';\n  }\n\n  /**\n   * Method to find the byte size of the string provides\n   */\n  byteSize(base64String) {\n    return this.formatAsBytes(this.size(base64String));\n  }\n\n  /**\n   * Method to open file\n   */\n  openFile(contentType, data) {\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      // To support IE and Edge\n      const byteCharacters = atob(data);\n      const byteNumbers = new Array(byteCharacters.length);\n      for (let i = 0; i < byteCharacters.length; i++) {\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\n      }\n      const byteArray = new Uint8Array(byteNumbers);\n      const blob = new Blob([byteArray], {\n        type: contentType,\n      });\n      window.navigator.msSaveOrOpenBlob(blob);\n    } else {\n      // Other browsers\n      const fileURL = `data:${contentType};base64,${data}`;\n      const win = window.open();\n      win.document.write(\n        '<iframe src=\"' +\n          fileURL +\n          '\" frameborder=\"0\" style=\"border:0; top:0px; left:0px; bottom:0px; right:0px; width:100%; height:100%;\" allowfullscreen></iframe>'\n      );\n    }\n  }\n\n  /**\n   * Method to convert the file to base64\n   */\n  toBase64(file, cb) {\n    const fileReader = new FileReader();\n    fileReader.readAsDataURL(file);\n    fileReader.onload = (e: any) => {\n      const base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n      cb(base64Data);\n    };\n  }\n\n  /**\n   * Method to clear the input\n   */\n  clearInputImage(entity, elementRef, field, fieldContentType, idInput) {\n    if (entity && field && fieldContentType) {\n      if (Object.prototype.hasOwnProperty.call(entity, field)) {\n        entity[field] = null;\n      }\n      if (Object.prototype.hasOwnProperty.call(entity, fieldContentType)) {\n        entity[fieldContentType] = null;\n      }\n      if (elementRef && idInput && elementRef.nativeElement.querySelector('#' + idInput)) {\n        elementRef.nativeElement.querySelector('#' + idInput).value = null;\n      }\n    }\n  }\n\n  endsWith(suffix, str) {\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n  }\n\n  paddingSize(value) {\n    if (this.endsWith('==', value)) {\n      return 2;\n    }\n    if (this.endsWith('=', value)) {\n      return 1;\n    }\n    return 0;\n  }\n\n  size(value) {\n    return (value.length / 4) * 3 - this.paddingSize(value);\n  }\n\n  formatAsBytes(size) {\n    return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n  }\n\n  setFileData(event, entity, field, isImage) {\n    if (event && event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      if (isImage && !/^image\\//.test(file.type)) {\n        return;\n      }\n      this.toBase64(file, base64Data => {\n        entity[field] = base64Data;\n        entity[`${field}ContentType`] = file.type;\n      });\n    }\n  }\n\n  /**\n   * Method to download file\n   */\n  downloadFile(contentType, data, fileName) {\n    const byteCharacters = atob(data);\n    const byteNumbers = new Array(byteCharacters.length);\n    for (let i = 0; i < byteCharacters.length; i++) {\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\n    }\n    const byteArray = new Uint8Array(byteNumbers);\n    const blob = new Blob([byteArray], {\n      type: contentType,\n    });\n    const tempLink = document.createElement('a');\n    tempLink.href = window.URL.createObjectURL(blob);\n    tempLink.download = fileName;\n    tempLink.target = '_blank';\n    tempLink.click();\n  }\n\n  /**\n   * Method to parse header links\n   */\n  parseLinks(header) {\n    const links = {};\n\n    if (header === null || header.indexOf(',') === -1) {\n      return links;\n    }\n    // Split parts by comma\n    const parts = header.split(',');\n\n    // Parse each part into a named link\n    parts.forEach(p => {\n      if (p.indexOf('>;') === -1) {\n        return;\n      }\n      const section = p.split('>;');\n      const url = section[0].replace(/<(.*)/, '$1').trim();\n      const queryString = { page: null };\n      url.replace(new RegExp('([^?=&]+)(=([^&]*))?', 'g'), ($0, $1, $2, $3) => {\n        queryString[$1] = $3;\n      });\n      let page = queryString.page;\n      if (typeof page === 'string') {\n        page = parseInt(page, 10);\n      }\n      const name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n      links[name] = page;\n    });\n    return links;\n  }\n}\n","import { IDeviceModel } from '@/shared/model/device-model.model';\n\nimport { Size } from '@/shared/model/enumerations/size.model';\nexport interface IDevice {\n  id?: number;\n  name?: string;\n  description?: string | null;\n  price?: number;\n  deviceSize?: Size;\n  imageContentType?: string | null;\n  image?: string | null;\n  deviceModel?: IDeviceModel;\n}\n\nexport class Device implements IDevice {\n  constructor(\n    public id?: number,\n    public name?: string,\n    public description?: string | null,\n    public price?: number,\n    public deviceSize?: Size,\n    public imageContentType?: string | null,\n    public image?: string | null,\n    public deviceModel?: IDeviceModel\n  ) {}\n}\n","import { render, staticRenderFns } from \"./device-update.vue?vue&type=template&id=19ce5bdc&\"\nimport script from \"./device-update.component.ts?vue&type=script&lang=ts&\"\nexport * from \"./device-update.component.ts?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/chrisphyne/Documents/JhipsterApps/archive/pos-device-monolith/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('19ce5bdc')) {\n      api.createRecord('19ce5bdc', component.options)\n    } else {\n      api.reload('19ce5bdc', component.options)\n    }\n    module.hot.accept(\"./device-update.vue?vue&type=template&id=19ce5bdc&\", function () {\n      api.rerender('19ce5bdc', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"src/main/webapp/app/entities/device/device-update.vue\"\nexport default component.exports","import mod from \"-!../../../../../../node_modules/ts-loader/index.js??clonedRuleSet-1[0].rules[0].use[0]!./device-update.component.ts?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../../../../node_modules/ts-loader/index.js??clonedRuleSet-1[0].rules[0].use[0]!./device-update.component.ts?vue&type=script&lang=ts&\"","var render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"row justify-content-center\" }, [\n    _c(\"div\", { staticClass: \"col-8\" }, [\n      _c(\n        \"form\",\n        {\n          attrs: { name: \"editForm\", role: \"form\", novalidate: \"\" },\n          on: {\n            submit: function ($event) {\n              $event.preventDefault()\n              return _vm.save()\n            },\n          },\n        },\n        [\n          _c(\n            \"h2\",\n            {\n              attrs: {\n                id: \"posdevicerestapiApp.device.home.createOrEditLabel\",\n                \"data-cy\": \"DeviceCreateUpdateHeading\",\n              },\n              domProps: {\n                textContent: _vm._s(\n                  _vm.$t(\"posdevicerestapiApp.device.home.createOrEditLabel\")\n                ),\n              },\n            },\n            [_vm._v(\"\\n        Create or edit a Device\\n      \")]\n          ),\n          _vm._v(\" \"),\n          _c(\"div\", [\n            _vm.device.id\n              ? _c(\"div\", { staticClass: \"form-group\" }, [\n                  _c(\n                    \"label\",\n                    {\n                      attrs: { for: \"id\" },\n                      domProps: {\n                        textContent: _vm._s(_vm.$t(\"global.field.id\")),\n                      },\n                    },\n                    [_vm._v(\"ID\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.device.id,\n                        expression: \"device.id\",\n                      },\n                    ],\n                    staticClass: \"form-control\",\n                    attrs: { type: \"text\", id: \"id\", name: \"id\", readonly: \"\" },\n                    domProps: { value: _vm.device.id },\n                    on: {\n                      input: function ($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(_vm.device, \"id\", $event.target.value)\n                      },\n                    },\n                  }),\n                ])\n              : _vm._e(),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"form-group\" }, [\n              _c(\n                \"label\",\n                {\n                  staticClass: \"form-control-label\",\n                  attrs: { for: \"device-name\" },\n                  domProps: {\n                    textContent: _vm._s(\n                      _vm.$t(\"posdevicerestapiApp.device.name\")\n                    ),\n                  },\n                },\n                [_vm._v(\"Name\")]\n              ),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.$v.device.name.$model,\n                    expression: \"$v.device.name.$model\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                class: {\n                  valid: !_vm.$v.device.name.$invalid,\n                  invalid: _vm.$v.device.name.$invalid,\n                },\n                attrs: {\n                  type: \"text\",\n                  name: \"name\",\n                  id: \"device-name\",\n                  \"data-cy\": \"name\",\n                  required: \"\",\n                },\n                domProps: { value: _vm.$v.device.name.$model },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(_vm.$v.device.name, \"$model\", $event.target.value)\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _vm.$v.device.name.$anyDirty && _vm.$v.device.name.$invalid\n                ? _c(\"div\", [\n                    !_vm.$v.device.name.required\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\"entity.validation.required\")\n                              ),\n                            },\n                          },\n                          [\n                            _vm._v(\n                              \"\\n              This field is required.\\n            \"\n                            ),\n                          ]\n                        )\n                      : _vm._e(),\n                  ])\n                : _vm._e(),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"form-group\" }, [\n              _c(\n                \"label\",\n                {\n                  staticClass: \"form-control-label\",\n                  attrs: { for: \"device-description\" },\n                  domProps: {\n                    textContent: _vm._s(\n                      _vm.$t(\"posdevicerestapiApp.device.description\")\n                    ),\n                  },\n                },\n                [_vm._v(\"Description\")]\n              ),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.$v.device.description.$model,\n                    expression: \"$v.device.description.$model\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                class: {\n                  valid: !_vm.$v.device.description.$invalid,\n                  invalid: _vm.$v.device.description.$invalid,\n                },\n                attrs: {\n                  type: \"text\",\n                  name: \"description\",\n                  id: \"device-description\",\n                  \"data-cy\": \"description\",\n                },\n                domProps: { value: _vm.$v.device.description.$model },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(\n                      _vm.$v.device.description,\n                      \"$model\",\n                      $event.target.value\n                    )\n                  },\n                },\n              }),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"form-group\" }, [\n              _c(\n                \"label\",\n                {\n                  staticClass: \"form-control-label\",\n                  attrs: { for: \"device-price\" },\n                  domProps: {\n                    textContent: _vm._s(\n                      _vm.$t(\"posdevicerestapiApp.device.price\")\n                    ),\n                  },\n                },\n                [_vm._v(\"Price\")]\n              ),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model.number\",\n                    value: _vm.$v.device.price.$model,\n                    expression: \"$v.device.price.$model\",\n                    modifiers: { number: true },\n                  },\n                ],\n                staticClass: \"form-control\",\n                class: {\n                  valid: !_vm.$v.device.price.$invalid,\n                  invalid: _vm.$v.device.price.$invalid,\n                },\n                attrs: {\n                  type: \"number\",\n                  name: \"price\",\n                  id: \"device-price\",\n                  \"data-cy\": \"price\",\n                  required: \"\",\n                },\n                domProps: { value: _vm.$v.device.price.$model },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(\n                      _vm.$v.device.price,\n                      \"$model\",\n                      _vm._n($event.target.value)\n                    )\n                  },\n                  blur: function ($event) {\n                    return _vm.$forceUpdate()\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _vm.$v.device.price.$anyDirty && _vm.$v.device.price.$invalid\n                ? _c(\"div\", [\n                    !_vm.$v.device.price.required\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\"entity.validation.required\")\n                              ),\n                            },\n                          },\n                          [\n                            _vm._v(\n                              \"\\n              This field is required.\\n            \"\n                            ),\n                          ]\n                        )\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    !_vm.$v.device.price.min\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\"entity.validation.min\", { min: 0 })\n                              ),\n                            },\n                          },\n                          [\n                            _vm._v(\n                              \"\\n              This field should be at least 0.\\n            \"\n                            ),\n                          ]\n                        )\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    !_vm.$v.device.price.numeric\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\"entity.validation.number\")\n                              ),\n                            },\n                          },\n                          [\n                            _vm._v(\n                              \"\\n              This field should be a number.\\n            \"\n                            ),\n                          ]\n                        )\n                      : _vm._e(),\n                  ])\n                : _vm._e(),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"form-group\" }, [\n              _c(\n                \"label\",\n                {\n                  staticClass: \"form-control-label\",\n                  attrs: { for: \"device-deviceSize\" },\n                  domProps: {\n                    textContent: _vm._s(\n                      _vm.$t(\"posdevicerestapiApp.device.deviceSize\")\n                    ),\n                  },\n                },\n                [_vm._v(\"Device Size\")]\n              ),\n              _vm._v(\" \"),\n              _c(\n                \"select\",\n                {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.$v.device.deviceSize.$model,\n                      expression: \"$v.device.deviceSize.$model\",\n                    },\n                  ],\n                  staticClass: \"form-control\",\n                  class: {\n                    valid: !_vm.$v.device.deviceSize.$invalid,\n                    invalid: _vm.$v.device.deviceSize.$invalid,\n                  },\n                  attrs: {\n                    name: \"deviceSize\",\n                    id: \"device-deviceSize\",\n                    \"data-cy\": \"deviceSize\",\n                    required: \"\",\n                  },\n                  on: {\n                    change: function ($event) {\n                      var $$selectedVal = Array.prototype.filter\n                        .call($event.target.options, function (o) {\n                          return o.selected\n                        })\n                        .map(function (o) {\n                          var val = \"_value\" in o ? o._value : o.value\n                          return val\n                        })\n                      _vm.$set(\n                        _vm.$v.device.deviceSize,\n                        \"$model\",\n                        $event.target.multiple\n                          ? $$selectedVal\n                          : $$selectedVal[0]\n                      )\n                    },\n                  },\n                },\n                [\n                  _c(\n                    \"option\",\n                    {\n                      attrs: {\n                        value: \"S\",\n                        label: _vm.$t(\"posdevicerestapiApp.Size.S\"),\n                      },\n                    },\n                    [_vm._v(\"S\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"option\",\n                    {\n                      attrs: {\n                        value: \"M\",\n                        label: _vm.$t(\"posdevicerestapiApp.Size.M\"),\n                      },\n                    },\n                    [_vm._v(\"M\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"option\",\n                    {\n                      attrs: {\n                        value: \"L\",\n                        label: _vm.$t(\"posdevicerestapiApp.Size.L\"),\n                      },\n                    },\n                    [_vm._v(\"L\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"option\",\n                    {\n                      attrs: {\n                        value: \"XL\",\n                        label: _vm.$t(\"posdevicerestapiApp.Size.XL\"),\n                      },\n                    },\n                    [_vm._v(\"XL\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"option\",\n                    {\n                      attrs: {\n                        value: \"XXL\",\n                        label: _vm.$t(\"posdevicerestapiApp.Size.XXL\"),\n                      },\n                    },\n                    [_vm._v(\"XXL\")]\n                  ),\n                ]\n              ),\n              _vm._v(\" \"),\n              _vm.$v.device.deviceSize.$anyDirty &&\n              _vm.$v.device.deviceSize.$invalid\n                ? _c(\"div\", [\n                    !_vm.$v.device.deviceSize.required\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\"entity.validation.required\")\n                              ),\n                            },\n                          },\n                          [\n                            _vm._v(\n                              \"\\n              This field is required.\\n            \"\n                            ),\n                          ]\n                        )\n                      : _vm._e(),\n                  ])\n                : _vm._e(),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"form-group\" }, [\n              _c(\n                \"label\",\n                {\n                  staticClass: \"form-control-label\",\n                  attrs: { for: \"device-image\" },\n                  domProps: {\n                    textContent: _vm._s(\n                      _vm.$t(\"posdevicerestapiApp.device.image\")\n                    ),\n                  },\n                },\n                [_vm._v(\"Image\")]\n              ),\n              _vm._v(\" \"),\n              _c(\"div\", [\n                _vm.device.image\n                  ? _c(\"img\", {\n                      staticStyle: { \"max-height\": \"100px\" },\n                      attrs: {\n                        src:\n                          \"data:\" +\n                          _vm.device.imageContentType +\n                          \";base64,\" +\n                          _vm.device.image,\n                        alt: \"device image\",\n                      },\n                    })\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _vm.device.image\n                  ? _c(\n                      \"div\",\n                      { staticClass: \"form-text text-danger clearfix\" },\n                      [\n                        _c(\"span\", { staticClass: \"pull-left\" }, [\n                          _vm._v(\n                            _vm._s(_vm.device.imageContentType) +\n                              \", \" +\n                              _vm._s(_vm.byteSize(_vm.device.image))\n                          ),\n                        ]),\n                        _vm._v(\" \"),\n                        _c(\n                          \"button\",\n                          {\n                            staticClass: \"btn btn-secondary btn-xs pull-right\",\n                            attrs: { type: \"button\" },\n                            on: {\n                              click: function ($event) {\n                                return _vm.clearInputImage(\n                                  \"image\",\n                                  \"imageContentType\",\n                                  \"file_image\"\n                                )\n                              },\n                            },\n                          },\n                          [\n                            _c(\"font-awesome-icon\", {\n                              attrs: { icon: \"times\" },\n                            }),\n                          ],\n                          1\n                        ),\n                      ]\n                    )\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _c(\"input\", {\n                  ref: \"file_image\",\n                  attrs: {\n                    type: \"file\",\n                    id: \"file_image\",\n                    \"data-cy\": \"image\",\n                    accept: \"image/*\",\n                  },\n                  domProps: {\n                    textContent: _vm._s(_vm.$t(\"entity.action.addimage\")),\n                  },\n                  on: {\n                    change: function ($event) {\n                      return _vm.setFileData($event, _vm.device, \"image\", true)\n                    },\n                  },\n                }),\n              ]),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.$v.device.image.$model,\n                    expression: \"$v.device.image.$model\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                class: {\n                  valid: !_vm.$v.device.image.$invalid,\n                  invalid: _vm.$v.device.image.$invalid,\n                },\n                attrs: {\n                  type: \"hidden\",\n                  name: \"image\",\n                  id: \"device-image\",\n                  \"data-cy\": \"image\",\n                },\n                domProps: { value: _vm.$v.device.image.$model },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(_vm.$v.device.image, \"$model\", $event.target.value)\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.device.imageContentType,\n                    expression: \"device.imageContentType\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                attrs: {\n                  type: \"hidden\",\n                  name: \"imageContentType\",\n                  id: \"device-imageContentType\",\n                },\n                domProps: { value: _vm.device.imageContentType },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(\n                      _vm.device,\n                      \"imageContentType\",\n                      $event.target.value\n                    )\n                  },\n                },\n              }),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"form-group\" }, [\n              _c(\n                \"label\",\n                {\n                  staticClass: \"form-control-label\",\n                  attrs: { for: \"device-deviceModel\" },\n                  domProps: {\n                    textContent: _vm._s(\n                      _vm.$t(\"posdevicerestapiApp.device.deviceModel\")\n                    ),\n                  },\n                },\n                [_vm._v(\"Device Model\")]\n              ),\n              _vm._v(\" \"),\n              _c(\n                \"select\",\n                {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.device.deviceModel,\n                      expression: \"device.deviceModel\",\n                    },\n                  ],\n                  staticClass: \"form-control\",\n                  attrs: {\n                    id: \"device-deviceModel\",\n                    \"data-cy\": \"deviceModel\",\n                    name: \"deviceModel\",\n                    required: \"\",\n                  },\n                  on: {\n                    change: function ($event) {\n                      var $$selectedVal = Array.prototype.filter\n                        .call($event.target.options, function (o) {\n                          return o.selected\n                        })\n                        .map(function (o) {\n                          var val = \"_value\" in o ? o._value : o.value\n                          return val\n                        })\n                      _vm.$set(\n                        _vm.device,\n                        \"deviceModel\",\n                        $event.target.multiple\n                          ? $$selectedVal\n                          : $$selectedVal[0]\n                      )\n                    },\n                  },\n                },\n                [\n                  !_vm.device.deviceModel\n                    ? _c(\"option\", {\n                        attrs: { selected: \"\" },\n                        domProps: { value: null },\n                      })\n                    : _vm._e(),\n                  _vm._v(\" \"),\n                  _vm._l(_vm.deviceModels, function (deviceModelOption) {\n                    return _c(\n                      \"option\",\n                      {\n                        key: deviceModelOption.id,\n                        domProps: {\n                          value:\n                            _vm.device.deviceModel &&\n                            deviceModelOption.id === _vm.device.deviceModel.id\n                              ? _vm.device.deviceModel\n                              : deviceModelOption,\n                        },\n                      },\n                      [\n                        _vm._v(\n                          \"\\n              \" +\n                            _vm._s(deviceModelOption.name) +\n                            \"\\n            \"\n                        ),\n                      ]\n                    )\n                  }),\n                ],\n                2\n              ),\n            ]),\n            _vm._v(\" \"),\n            _vm.$v.device.deviceModel.$anyDirty &&\n            _vm.$v.device.deviceModel.$invalid\n              ? _c(\"div\", [\n                  !_vm.$v.device.deviceModel.required\n                    ? _c(\n                        \"small\",\n                        {\n                          staticClass: \"form-text text-danger\",\n                          domProps: {\n                            textContent: _vm._s(\n                              _vm.$t(\"entity.validation.required\")\n                            ),\n                          },\n                        },\n                        [\n                          _vm._v(\n                            \"\\n            This field is required.\\n          \"\n                          ),\n                        ]\n                      )\n                    : _vm._e(),\n                ])\n              : _vm._e(),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", [\n            _c(\n              \"button\",\n              {\n                staticClass: \"btn btn-secondary\",\n                attrs: { type: \"button\", id: \"cancel-save\" },\n                on: {\n                  click: function ($event) {\n                    return _vm.previousState()\n                  },\n                },\n              },\n              [\n                _c(\"font-awesome-icon\", { attrs: { icon: \"ban\" } }),\n                _vm._v(\" \"),\n                _c(\n                  \"span\",\n                  {\n                    domProps: {\n                      textContent: _vm._s(_vm.$t(\"entity.action.cancel\")),\n                    },\n                  },\n                  [_vm._v(\"Cancel\")]\n                ),\n              ],\n              1\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"button\",\n              {\n                staticClass: \"btn btn-primary\",\n                attrs: {\n                  type: \"submit\",\n                  id: \"save-entity\",\n                  \"data-cy\": \"entityCreateSaveButton\",\n                  disabled: _vm.$v.device.$invalid || _vm.isSaving,\n                },\n              },\n              [\n                _c(\"font-awesome-icon\", { attrs: { icon: \"save\" } }),\n                _vm._v(\" \"),\n                _c(\n                  \"span\",\n                  {\n                    domProps: {\n                      textContent: _vm._s(_vm.$t(\"entity.action.save\")),\n                    },\n                  },\n                  [_vm._v(\"Save\")]\n                ),\n              ],\n              1\n            ),\n          ]),\n        ]\n      ),\n    ]),\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AACA;;AAyFA;AAvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA/FA;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAJA;AAHA;AACA;AACA;AACA;AAiGA;AAAA;AAjGA;;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AAEA;;AAEA;AAEA;AAAA;AAAA;;AAkKA;AAjjKA;AADA;AACA;AAkKA;AAAA;AAlKA;;;A;;;;;;;;;;;;;ACQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;A;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A;;;;;;;;;;;ACtsourceRoot":""}